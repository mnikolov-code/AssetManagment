const mongoose = require('mongoose');
const ChangeLog = require('./models/ChangeLog'); // –ò–º–ø–æ—Ä—Ç–∏—Ä–∞—ò –≥–æ –º–æ–¥–µ–ª–æ—Ç –∑–∞ –ª–æ–≥–æ–≤–∏

mongoose.connect('mongodb://localhost:27017/asset_tracking')

    .then(() => console.log("‚úÖ Connected to MongoDB"))
    .catch(err => console.error("‚ùå Error connecting to MongoDB:", err));

// –û–¢–°–¢–†–ê–ù–ò–à –ì–û –û–í–û–à –î–í–û–ï–ù –ò–ú–ü–û–†–¢!
// const ChangeLog = require('./models/ChangeLog'); 

async function saveChangeLog(fileName, rowIndex, columnName, oldValue, newValue, email) {
    const changeLog = new ChangeLog({
        fileName,
        rowIndex,
        columnName,
        oldValue,
        newValue,
        modifiedBy: email
    });

    try {
        await changeLog.save();
        console.log("‚úÖ –ü—Ä–æ–º–µ–Ω–∞—Ç–∞ –µ –∑–∞—á—É–≤–∞–Ω–∞ –≤–æ –±–∞–∑–∞—Ç–∞!");
    } catch (err) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—á—É–≤—É–≤–∞—ö–µ –Ω–∞ –ª–æ–≥–æ—Ç:", err);
    }
}

const chokidar = require('chokidar'); // üìå –î–æ–¥–∞—ò —ò–∞ –æ–≤–∞–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–ø–æ—Ç—Ä–µ–±–Ω–æ –µ `npm install chokidar`)

// üìå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—É–º –∫–æ—ò —ú–µ —Å–µ —Å–ª–µ–¥–∏ (–ø—Ä–∏–ª–∞–≥–æ–¥–∏ —ò–∞ –ª–æ–∫–∞—Ü–∏—ò–∞—Ç–∞ –∞–∫–æ —Ç—Ä–µ–±–∞)
const WATCHED_FOLDER = '\\\\srvaitalkam\\Reporti';

// üìå –ß—É–≤–∞—ö–µ –Ω–∞ —Å—Ç–∞—Ä–∞—Ç–∞ —Å–æ—Å—Ç–æ—ò–±–∞ –Ω–∞ –¥–∞—Ç–æ—Ç–µ–∫–∏—Ç–µ
let lastKnownState = {};

// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —Å–ª–µ–¥–µ—ö–µ –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏ –≤–æ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ
function watchFiles() {
    console.log(`üëÄ –ó–∞–ø–æ—á–Ω–∞—Ç–æ —Å–ª–µ–¥–µ—ö–µ –Ω–∞ ${WATCHED_FOLDER} –∏ —Å–∏—Ç–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—É–º–∏...`);

    chokidar.watch(WATCHED_FOLDER, { 
        persistent: true, 
        ignoreInitial: false, 
        depth: Infinity, 
        usePolling: true, // üõ†Ô∏è –î–æ–¥–∞–≤–∞ polling –∑–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç –Ω–∞ –º—Ä–µ–∂–Ω–∏ –ø–∞–ø–∫–∏
        interval: 1000, // üìå –ü—Ä–æ–≤–µ—Ä—É–≤–∞ –Ω–∞ —Å–µ–∫–æ—ò–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞ –ø—Ä–æ–º–µ–Ω–∏
        awaitWriteFinish: {
            stabilityThreshold: 2000, // üõ†Ô∏è –ß–µ–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –¥–∞ —Å–µ –∑–∞–≤—Ä—à–∏ –ø–∏—à—É–≤–∞—ö–µ—Ç–æ –ø—Ä–µ–¥ –¥–∞ —Ä–µ–∞–≥–∏—Ä–∞
            pollInterval: 500 
        }
    })
    .on('change', async (filePath) => {
        console.log(`üîÑ –§–∞—ò–ª–æ—Ç –µ –∏–∑–º–µ–Ω–µ—Ç: ${filePath}`);
        await processFileChange(filePath); // –û—Å–∏–≥—É—Ä—É–≤–∞ –¥–µ–∫–∞ —ú–µ —á–µ–∫–∞ –¥–æ–¥–µ–∫–∞ –Ω–µ —Å–µ –æ–±—Ä–∞–±–æ—Ç–∏ –ø—Ä–æ–º–µ–Ω–∞—Ç–∞
    })
    .on('error', error => {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–ª–µ–¥–µ—ö–µ –Ω–∞ —Ñ–æ–ª–¥–µ—Ä–∏—Ç–µ:", error);
    });
}

// üîπ –ó–∞–ø–æ—á–Ω–∏ –≥–æ —Å–ª–µ–¥–µ—ö–µ—Ç–æ –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ
watchFiles();


// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–∏—Ç–µ
async function processFileChange(filePath) {
    const fileName = path.basename(filePath);

    if (fileName.endsWith('.xlsx')) {
        checkExcelChanges(filePath, fileName);
    } else if (fileName.endsWith('.csv')) {
        checkCSVChanges(filePath, fileName);
    }
}




// üìå –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —Å–ª–µ–¥–µ—ö–µ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∏ –≤–æ Excel
function checkExcelChanges(filePath, fileName) {
    const workbook = xlsx.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], { defval: "" });

    if (!lastKnownState[fileName]) {
        lastKnownState[fileName] = sheetData;
        return;
    }

    sheetData.forEach((row, rowIndex) => {
        Object.keys(row).forEach(columnName => {
            const oldValue = lastKnownState[fileName][rowIndex] ? lastKnownState[fileName][rowIndex][columnName] : "";
            const newValue = row[columnName];

            if (oldValue !== newValue) {
                console.log(`üîÑ Excel –ø—Ä–æ–º–µ–Ω–∞ –≤–æ ${fileName} -> –†–µ–¥: ${rowIndex}, –ö–æ–ª–æ–Ω–∞: ${columnName}: ${oldValue} ‚ûù ${newValue}`);

                saveChangeLog(fileName, rowIndex, columnName, oldValue, newValue, "–°–∏—Å—Ç–µ–º—Å–∫–æ —Å–ª–µ–¥–µ—ö–µ");
            }
        });
    });

    lastKnownState[fileName] = sheetData; // –ê–∂—É—Ä–∏—Ä–∞—ò —ò–∞ —Å–æ—Å—Ç–æ—ò–±–∞—Ç–∞
}

// üìå –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —Å–ª–µ–¥–µ—ö–µ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∏ –≤–æ CSV
function checkCSVChanges(filePath, fileName) {
    let csvData = [];
    fs.createReadStream(filePath)
        .pipe(csv())
        .on('data', (row) => csvData.push(row))
        .on('end', () => {
            if (!lastKnownState[fileName]) {
                lastKnownState[fileName] = csvData;
                return;
            }

            csvData.forEach((row, rowIndex) => {
                Object.keys(row).forEach(columnName => {
                    const oldValue = lastKnownState[fileName][rowIndex] ? lastKnownState[fileName][rowIndex][columnName] : "";
                    const newValue = row[columnName];

                    if (oldValue !== newValue) {
                        console.log(`üîÑ CSV –ø—Ä–æ–º–µ–Ω–∞ –≤–æ ${fileName} -> –†–µ–¥: ${rowIndex}, –ö–æ–ª–æ–Ω–∞: ${columnName}: ${oldValue} ‚ûù ${newValue}`);

                        saveChangeLog(fileName, rowIndex, columnName, oldValue, newValue, "–°–∏—Å—Ç–µ–º—Å–∫–æ —Å–ª–µ–¥–µ—ö–µ");
                    }
                });
            });

            lastKnownState[fileName] = csvData; // –ê–∂—É—Ä–∏—Ä–∞—ò —ò–∞ —Å–æ—Å—Ç–æ—ò–±–∞—Ç–∞
        });
}

// üîπ –ó–∞–ø–æ—á–Ω–∏ –≥–æ —Å–ª–µ–¥–µ—ö–µ—Ç–æ –Ω–∞ —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ
watchFiles();



const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const fs = require('fs');
const xlsx = require('xlsx');
const csv = require('csv-parser');
const ldap = require('ldapjs');

const app = express();
const PORT = 3000;

// –ü–∞—Ç–µ–∫–∏ –¥–æ —Ñ–æ–ª–¥–µ—Ä–∏—Ç–µ
const REPORTS_PATH = '\\\\srvaitalkam\\Reporti';
const HISTORY_PATH = '\\\\srvaitalkam\\Reporti\\Martin';
const LOG_FILE_PATH = path.join(__dirname, 'user_activity_log.txt');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ —á–∏—Ç–∞—ö–µ –Ω–∞ Excel –∏ CSV —Ñ–∞—ò–ª–æ–≤–∏
function readFilesFromDirectory(directory) {
    return new Promise((resolve, reject) => {
        fs.readdir(directory, (err, files) => {
            if (err) {
                console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞—ö–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—É–º–æ—Ç:", err);
                reject(err);
                return;
            }

            console.log("üìÇ –ù–∞—ò–¥–µ–Ω–∏ —Ñ–∞—ò–ª–æ–≤–∏:", files);
            let results = [];
            let pending = files.length;

            if (!pending) resolve(results);

            files.forEach(file => {
                const filePath = path.join(directory, file);

                if (file.endsWith('.xlsx')) {
                    const workbook = xlsx.readFile(filePath);
                    const sheetName = workbook.SheetNames;
                    const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);
                    console.log(`üìñ Excel —Ñ–∞—ò–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${file}, —Ä–µ–¥–æ–≤–∏: ${sheetData.length}`);
                    results.push({ fileName: file, data: sheetData });
                    if (!--pending) resolve(results);
                } else if (file.endsWith('.csv')) {
                    let csvData = [];
                    fs.createReadStream(filePath)
                        .pipe(csv())
                        .on('data', (row) => csvData.push(row))
                        .on('end', () => {
                            console.log(`üìñ CSV —Ñ–∞—ò–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${file}, —Ä–µ–¥–æ–≤–∏: ${csvData.length}`);
                            results.push({ fileName: file, data: csvData });
                            if (!--pending) resolve(results);
                        });
                } else {
                    if (!--pending) resolve(results);
                }
            });
        });
    });
}

// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –ª–æ–≥–∏—Ä–∞—ö–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function logActivity(email, action, details) {
    const timestamp = new Date().toISOString();
    const logEntry = `${timestamp} - ${email} - ${action} - ${details}\n`;

    fs.appendFile(LOG_FILE_PATH, logEntry, (err) => {
        if (err) {
            console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—à—É–≤–∞—ö–µ –Ω–∞ –ª–æ–≥:", err);
        } else {
            console.log("‚úÖ –õ–æ–≥–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—à–∞–Ω!");
        }
    });
}

app.post('/search', async (req, res) => {
    try {
        const { query, email, selectedFiles } = req.body;

        if (!query || !email) {
            return res.status(400).json({ error: '–ú–æ—Ä–∞ –¥–∞ –≤–Ω–µ—Å–µ—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏—É–º –∑–∞ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ –∏ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏.' });
        }

        logActivity(email, "–ü—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ", `–ë–∞—Ä–∞—ö–µ: ${query}`);

        let filesToSearch;
        if (selectedFiles && selectedFiles.length > 0) {
            filesToSearch = selectedFiles; // –ü—Ä–µ–±–∞—Ä—É–≤–∞—ò —Å–∞–º–æ –≤–æ —Å–µ–ª–µ–∫—Ç–∏—Ä–∞–Ω–∏—Ç–µ —Ñ–∞—ò–ª–æ–≤–∏
        } else {
            filesToSearch = fs.readdirSync(REPORTS_PATH)
                .filter(file => file.endsWith('.xlsx') || file.endsWith('.csv')); // –ê–∫–æ –Ω–µ–º–∞ —Å–µ–ª–µ–∫—Ç–∏—Ä–∞–Ω–∏, –∫–æ—Ä–∏—Å—Ç–∏ –≥–∏ —Å–∏—Ç–µ
        }

        console.log("üìÇ –ü—Ä–µ–±–∞—Ä—É–≤–∞–º –≤–æ —Ñ–∞—ò–ª–æ–≤–∏—Ç–µ:", filesToSearch);

        let results = [];
        for (let fileName of filesToSearch) {
            const filePath = path.join(REPORTS_PATH, fileName);

            if (fileName.endsWith('.xlsx')) {
                const workbook = xlsx.readFile(filePath);
                const sheetName = workbook.SheetNames[0];
                const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], { defval: "" });

                const filteredData = sheetData.filter(row =>
                    Object.values(row).some(value => value.toString().toLowerCase().includes(query.toLowerCase()))
                );

                if (filteredData.length > 0) {
                    results.push({ fileName, data: filteredData });
                }
            } else if (fileName.endsWith('.csv')) {
                let csvData = [];
                fs.createReadStream(filePath)
                    .pipe(csv())
                    .on('data', (row) => csvData.push(row))
                    .on('end', () => {
                        const filteredData = csvData.filter(row =>
                            Object.values(row).some(value => value.toString().toLowerCase().includes(query.toLowerCase()))
                        );

                        if (filteredData.length > 0) {
                            results.push({ fileName, data: filteredData });
                        }
                    });
            }
        }

        setTimeout(() => { res.json(results); }, 1000); // –î–∞—ò –º—É 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ:', error);
        res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ.' });
    }
});

const getAllFiles = (dirPath, arrayOfFiles) => {
    const files = fs.readdirSync(dirPath);
    arrayOfFiles = arrayOfFiles || [];

    files.forEach(file => {
        const fullPath = path.join(dirPath, file);
        if (fs.statSync(fullPath).isDirectory()) {
            arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);
        } else if (file.endsWith('.xlsx') || file.endsWith('.csv')) {
            arrayOfFiles.push(fullPath.replace(REPORTS_PATH + "\\", ""));
        }
    });

    return arrayOfFiles;
};

const getFilesAndFolders = (dirPath) => {
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });

    const files = [];
    const folders = [];

    entries.forEach(entry => {
        if (entry.isDirectory()) {
            folders.push(entry.name);
        } else if (entry.name.endsWith('.xlsx') || entry.name.endsWith('.csv')) {
            files.push(entry.name);
        }
    });

    return { files, folders };
};

app.get('/getFilesAndFolders', async (req, res) => {
    try {
        const { files, folders } = getFilesAndFolders(REPORTS_PATH);
        res.json({ files, folders });
    } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∏ –ø–∞–ø–∫–∏:', error);
        res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∏ –ø–∞–ø–∫–∏.' });
    }
});


app.get('/getFiles', async (req, res) => {
    try {
        const files = fs.readdirSync(REPORTS_PATH)
            .filter(file => file.endsWith('.xlsx') || file.endsWith('.csv'));

        res.json(files);
    } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏:', error);
        res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏.' });
    }
});


app.get('/details', async (req, res) => {
    try {
        const { fileName, query } = req.query;

        if (!fileName || !query) {
            return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞ –∏–º–µ –Ω–∞ —Ñ–∞—ò–ª–æ—Ç –∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏—É–º –∑–∞ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ!" });
        }

        const filePath = path.join(REPORTS_PATH, fileName);
        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ error: '–§–∞—ò–ª–æ—Ç –Ω–µ –ø–æ—Å—Ç–æ–∏!' });
        }

        const workbook = xlsx.readFile(filePath);
        const sheetName = workbook.SheetNames[0];
        const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], { defval: "" });

        // üìå –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏
        const filteredData = sheetData.filter(row => 
            Object.values(row).some(value => value.toString().toLowerCase().includes(query.toLowerCase()))
        );

        res.json({ fileName, data: filteredData });
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∏–≤–∞—ö–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏:", error);
        res.status(500).json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∏–≤–∞—ö–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏!" });
    }
});


// API –∑–∞ –ø—Ä–∏–∫–∞–∑ –Ω–∞ —Å–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏
app.get('/data', async (req, res) => {
    try {
        const reports = await readFilesFromDirectory(REPORTS_PATH);
        res.json(reports);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞:', error);
        res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ.' });
    }
});

// API –∑–∞ —á–∏—Ç–∞—ö–µ –Ω–∞ –ª–æ–≥–æ–≤–∏
app.get('/logs', (req, res) => {
    fs.readFile(LOG_FILE_PATH, 'utf8', (err, data) => {
        if (err) {
            console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞—ö–µ –Ω–∞ –ª–æ–≥–æ–≤–∏—Ç–µ:", err);
            return res.status(500).json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞—ö–µ –Ω–∞ –ª–æ–≥–æ–≤–∏—Ç–µ!" });
        }

        const logs = data.split("\n").filter(line => line.trim() !== "").map(line => {
            const parts = line.split(" - ");
            return {
                timestamp: parts[0],
                email: parts[1],
                action: parts[2],
                details: parts[3]
            };
        });

        res.json(logs);
    });
});

app.get('/history', async (req, res) => {
    try {
        const { fileName, rowIndex, columnName } = req.query;
        if (!fileName || rowIndex === undefined || !columnName) {
            return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏!" });
        }

        // üìå –ó–µ–º–∞–º–µ —ò–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞—Ç–∞ –æ–¥ –±–∞–∑–∞—Ç–∞
        const changes = await ChangeLog.find({ fileName, rowIndex, columnName }).sort({ timestamp: -1 });

        if (changes.length === 0) {
            console.log("‚ö† –ù–µ–º–∞ –ø—Ä–µ—Ç—Ö–æ–¥–Ω–∏ –∏–∑–º–µ–Ω–∏ –∑–∞:", fileName, "–†–µ–¥:", rowIndex, "–ö–æ–ª–æ–Ω–∞:", columnName);
        }

        res.json(changes);
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∏–≤–∞—ö–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞—Ç–∞:", error);
        res.status(500).json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∏–≤–∞—ö–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞—Ç–∞." });
    }
});


// API –∑–∞ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ –∏—Å—Ç–æ—Ä–∏—ò–∞
app.post('/history', async (req, res) => {
    try {
        const { query } = req.body;
        const historyData = await readFilesFromDirectory(HISTORY_PATH);

        const filteredResults = historyData.map(report => ({
            fileName: report.fileName,
            data: report.data.filter(row => 
                Object.values(row).some(value => value.toString().toLowerCase().includes(query.toLowerCase()))
            )
        })).filter(report => report.data.length > 0);

        res.json(filteredResults);
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞:', error);
        res.status(500).json({ error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞.' });
    }
});

// –§—É–Ω–∫—Ü–∏—ò–∞ –∑–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—ò–∞ –ø—Ä–µ–∫—É Active Directory
function authenticateUser(email, password, callback) {
    const client = ldap.createClient({
        url: 'ldap://alkaloidad.local'
    });

    const username = email.split('@')[0]; // –ò–∑–≤–ª–µ–∫—É–≤–∞ "mnikolov" –æ–¥ "mnikolov@alkaloid.com.mk"
const domainUser = `alkaloidad\\${username}`;

    client.on('error', (err) => {
        console.error("‚ùå LDAP Client Error:", err.message);
        callback(false);
    });

    try {
        client.bind(domainUser, password, (err) => {
            if (err) {
                console.error("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—ò–∞:", err.message);
                callback(false);
            } else {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞:", email);
                callback(true);
            }
            client.unbind();
        });
    } catch (error) {
        console.error("‚ùå –§–∞—Ç–µ–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ LDAP –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ:", error.message);
        callback(false);
    }
}

app.post('/login', (req, res) => {
    const { email, password } = req.body;

    authenticateUser(email, password, (isAuthenticated) => {
        if (isAuthenticated) {
            logActivity(email, "–ù–∞—ò–∞–≤–∞", "–£—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞");
            res.json({ success: true, message: '–£—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞!' });
        } else {
            logActivity(email, "–ù–∞—ò–∞–≤–∞", "–ù–µ—É—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞");
            res.status(401).json({ success: false, message: '–ù–µ—É—Å–ø–µ—à–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—ò–∞!' });
        }
    });
});

app.post('/edit', async (req, res) => {
    try {
        const { fileName, rowIndex, columnName, newValue, email } = req.body;

        if (!fileName || rowIndex === undefined || !columnName || newValue === undefined || !email) {
            return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞–∞—Ç –ø–æ–¥–∞—Ç–æ—Ü–∏!" });
        }

        let filePath = path.join(REPORTS_PATH, fileName);
        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ error: '–§–∞—ò–ª–æ—Ç –Ω–µ –ø–æ—Å—Ç–æ–∏!' });
        }

        // üìå –ß–∏—Ç–∞—ö–µ –Ω–∞ Excel —Ñ–∞—ò–ª–æ—Ç
        const workbook = xlsx.readFile(filePath);
        const sheetName = workbook.SheetNames[0];
        const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], { defval: "" });

        if (!sheetData[rowIndex]) {
            return res.status(400).json({ error: "–†–µ–¥–∏—Ü–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç–æ–∏!" });
        }

        const oldValue = sheetData[rowIndex][columnName];
        sheetData[rowIndex][columnName] = newValue;

        // üìå –ß—É–≤–∞—ö–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞—Ç–∞ –Ω–∞ –∏–∑–º–µ–Ω–∏
        await saveChangeLog(fileName, rowIndex, columnName, oldValue, newValue, email);

        // üìå –ó–∞–ø–∏—à–∏ –≥–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –Ω–∞–∑–∞–¥ –≤–æ Excel
        workbook.Sheets[sheetName] = xlsx.utils.json_to_sheet(sheetData);
        xlsx.writeFile(filePath, workbook);

        console.log(`‚úÖ Excel —Ñ–∞—ò–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω: ${fileName}`);
        res.json({ success: true, message: "–ü–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ —Å–µ –∞–∂—É—Ä–∏—Ä–∞–Ω–∏!" });

    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—á—É–≤—É–≤–∞—ö–µ –Ω–∞ Excel:", error);
        res.status(500).json({ error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—á—É–≤—É–≤–∞—ö–µ –Ω–∞ Excel —Ñ–∞—ò–ª–æ—Ç!" });
    }
});



// –°—Ç–∞—Ä—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ—Ç
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä–æ—Ç –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω –Ω–∞ http://localhost:${PORT}`);
});